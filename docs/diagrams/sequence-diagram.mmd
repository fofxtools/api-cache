sequenceDiagram
    participant Client
    participant BaseApiClient
    participant ApiCacheManager
    participant CacheRepository
    participant CompressionService
    participant RateLimitService
    participant ApiEndpoint
    
    %% 1) Client calls BaseApiClient
    Client->>+BaseApiClient: sendCachedRequest(endpoint, params, method)

    %% 2) Generate cache key
    BaseApiClient->>+ApiCacheManager: generateCacheKey(clientName, endpoint, params, method, version)
    ApiCacheManager-->>BaseApiClient: cacheKey

    %% 3) Check cache
    BaseApiClient->>+ApiCacheManager: getCachedResponse(clientName, cacheKey)
    ApiCacheManager->>+CacheRepository: get(clientName, cacheKey)
    CacheRepository->>+CompressionService: decompress() (if needed)
    CompressionService-->>CacheRepository: decompressed data
    CacheRepository-->>ApiCacheManager: cached result
    ApiCacheManager-->>BaseApiClient: cached result

    alt Cache Hit
        %% 3A) Cache hit: return cached immediately
        BaseApiClient-->>Client: return cached response
    else Cache Miss
        %% 3B) Check rate limit
        BaseApiClient->>+ApiCacheManager: allowRequest(clientName)
        ApiCacheManager->>RateLimitService: allowRequest(clientName)
        RateLimitService-->>ApiCacheManager: boolean
        ApiCacheManager-->>BaseApiClient: boolean

        alt Rate Limited
            %% 4A) Rate limit triggered
            BaseApiClient->>ApiCacheManager: getAvailableIn(clientName)
            ApiCacheManager-->>BaseApiClient: seconds
            BaseApiClient-->>Client: throw RateLimitException
        else Request Allowed
            %% 4B) Make real API call
            BaseApiClient->>ApiEndpoint: HTTP request
            ApiEndpoint-->>BaseApiClient: HTTP response
            
            %% 5) Track rate limit usage
            BaseApiClient->>ApiCacheManager: incrementAttempts(clientName)
            ApiCacheManager->>RateLimitService: incrementAttempts(clientName)
            RateLimitService-->>ApiCacheManager: void
            
            %% 6) Cache the fresh response
            BaseApiClient->>+ApiCacheManager: storeResponse(clientName, cacheKey, apiResult)
            ApiCacheManager->>+CacheRepository: store(clientName, cacheKey, metadata)
            CacheRepository->>+CompressionService: compress() (if needed)
            CompressionService-->>CacheRepository: compressed data
            CacheRepository-->>ApiCacheManager: void
            ApiCacheManager-->>BaseApiClient: void
            
            %% 7) Return result
            BaseApiClient-->>Client: return final API response
        end
    end